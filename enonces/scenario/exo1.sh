# üî• Sc√©nario Complexe : Gestion d‚Äôune Feature avec Conflits R√©currents

# Contexte :

# 1) Vous travaillez sur un projet avec :
# - Une branche main (stable).
# - Une branche feature/payment (votre feature en cours).
# - Deux coll√®gues modifient aussi le code et poussent fr√©quemment sur main.

# üìú √âtapes du Sc√©nario (√Ä Ex√©cuter dans l‚ÄôOrdre)

#-------------------------------------------------------------
# 1. Pr√©paration

# bash
git clone https://github.com/user/repo.git  
cd repo  
git checkout -b feature/payment  # Cr√©e et bascule sur votre branche  

#-------------------------------------------------------------
# 2. Premier Commit sur la Feature
# Modifiez payment.html (ajoutez un bouton "Payer").

# bash
git add payment.html  
git commit -m "Ajout du bouton Payer"  

#-------------------------------------------------------------
# 3. Simulation d‚Äôune Mise √† Jour de main par un Coll√®gue
# (En vrai, √ßa arrive en background pendant que vous travaillez !)

# bash
git checkout main  
# Simule une modification d'un coll√®gue (conflit futur)  
echo "<footer>Copyright 2023</footer>" >> payment.html  
git add payment.html  
git commit -m "Ajout du footer"  
git push origin main  # Supposez que c'est fait par un coll√®gue 

#-------------------------------------------------------------
# 4. Retour sur la Feature : Conflit √† la R√©int√©gration

# bash
git checkout feature/payment  
# Essayez de mettre √† jour votre branche avec `main` :  
git rebase main  


# ‚û°Ô∏è Conflit dans payment.html (votre bouton + le footer du coll√®gue sont en conflit).